{"mappings":"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","sources":["src/server.ts","config.ts","src/app.ts","src/routes/messageRoutes.ts","src/controllers/messageController.ts","src/models/messageModel.ts","src/utils/catchAsync.ts","src/routes/userRoutes.ts","src/controllers/authController.ts","src/utils/appError.ts","src/models/userModel.ts","src/routes/stocksRoutes.ts","src/controllers/stocksController.ts","src/models/stocksModel.ts","src/utils/rapidApi.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport http from 'http';\nimport { WebSocket, WebSocketServer } from 'ws';\nimport config from './../config';\nimport app from './app';\nimport { Message } from \"./models/messageModel\";\n\nconst server = http.createServer(app);\n\nconst webSocket = new WebSocketServer({ server });\n\nwebSocket.on('connection', socket => {\n  socket.on('message', async (data) => {\n    const message = String(data);\n    await Message.create(JSON.parse(message));\n    webSocket.clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  });\n});\n\nconst DB = config.database.replace('<PASSWORD>', config.databasePassword);\n\nmongoose\n  .set('strictQuery', false) // as per Mongoose DeprecationWarning\n  .connect(DB)\n  // eslint-disable-next-line no-console\n  .then(() => console.log('Connected to DB'));\n\nconst port = config.port || 4300;\n\nserver.listen(port, () => {\n  // eslint-disable-next-line no-console\n  console.log(`Server is running on port ${port}`);\n});\n","export default {\n  nodeEnv: 'development',\n  port: 4300,\n  database: 'mongodb+srv://alisa:<PASSWORD>@cluster0.mdzr4rf.mongodb.net/d3js',\n  databasePassword: 'C35iU1iMRC11aEyM',\n  jwtSecret: 'd3js-application',\n  jwtExpiresIn: '24h',\n};\n","import express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\nimport compression from 'compression';\nimport helmet from 'helmet';\nimport messageRouter from './routes/messageRoutes';\nimport userRouter from './routes/userRoutes';\nimport stocksRouter from './routes/stocksRoutes';\nimport rapidApi from './utils/rapidApi';\n\nconst app = express();\n\nif (process.env.NODE_ENV === 'development') {\n  app.use(morgan('dev'));\n}\n\napp.use(express.json());\n\nrapidApi();\n\napp.use(compression());\napp.use(helmet());\n\napp.use(cors({ origin: ['http://localhost:4200', 'https://alisabox.github.io'] }));\napp.use('/api/v1/messages', messageRouter);\napp.use('/api/v1/users', userRouter);\napp.use('/api/v1/stocks', stocksRouter);\n\nexport default app;\n","import express from 'express';\nimport { getAllMessages } from '../controllers/messageController';\n\nconst router = express.Router();\n\nrouter\n  .route('/')\n  .get(getAllMessages);\n\nexport default router;\n","import { Message } from \"../models/messageModel\";\nimport catchAsync from \"../utils/catchAsync\";\n\n\nexport const getAllMessages = catchAsync(async (req, res) => {\n  const messages = await Message.find();\n\n  res.status(200).json({\n    status: 'success',\n    results: messages.length,\n    data: messages,\n  });\n});","import mongoose from \"mongoose\";\n\nconst messageModel = new mongoose.Schema(\n  {\n    senderId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"User\",\n    },\n    senderName: {\n      type: String,\n      required: true,\n    },\n    content: {\n      type: String,\n      trim: true,\n      required: [true, 'Message is missing'],\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nexport const Message = mongoose.model(\"Message\", messageModel);\n","import {\n  NextFunction,\n  Request,\n  Response,\n} from \"express\";\n\n\nexport default (fn: (req: Request, res: Response, next: NextFunction) => Promise<void>) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    fn(req, res, next).catch(next);\n  };\n};\n","import express from 'express';\nimport {\n  login,\n  signup,\n} from '../controllers/authController';\n\nconst router = express.Router();\n\nrouter.post('/signup', signup);\n\nrouter.post('/login', login);\n\nexport default router;","import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport config from '../../config';\nimport AppError from '../utils/appError';\nimport catchAsync from '../utils/catchAsync';\nimport { User } from '../models/userModel';\n\nconst accessToken = (id: mongoose.Types.ObjectId) => {\n  return jwt.sign({ id }, config.jwtSecret, {\n    expiresIn: config.jwtExpiresIn,\n  });\n};\n\nexport const signup = catchAsync(async (req, res, next) => {\n  const { name, password } = req.body;\n  const candidate = await User.findOne({ name });\n\n  if (candidate) {\n    return next(new AppError('User with this name already exists', 400));\n  }\n\n  const hashPassword = await bcrypt.hash(password, 7);\n\n  const newUser = await User.create({ name, password: hashPassword });\n\n  const token = accessToken(newUser._id);\n\n  res.status(201).json({\n    status: 'success',\n    token,\n    data: {\n      user: newUser,\n    },\n  });\n});\n\nexport const login = catchAsync(async (req, res, next) => {\n  const { name, password } = req.body;\n\n  if (!name || !password) return next(new AppError('Name or password is missing', 400));\n\n  const user = await User.findOne({ name }).select('+password');\n  if (!user) return next(new AppError(`User with the name ${name} doesn't exist`, 401));\n\n  const correctPassword = await bcrypt.compare(password, user.password);\n  if (!correctPassword) return next(new AppError('Incorrect password', 401));\n\n  const token = accessToken(user._id);\n\n  res.status(200).json({\n    status: 'success',\n    token,\n  });\n});\n","export default class AppError extends Error {\n  private _statusCode: number;\n  private _status: string;\n\n  public get statusCode(): number {\n    return this._statusCode;\n  }\n\n  public get status(): string {\n    return this._status;\n  }\n\n  constructor(\n    message: string,\n    statusCode: number\n  ) {\n    super(message);\n\n    this._statusCode = statusCode;\n    this._status = statusCode.toString().startsWith('4') ? 'Bad Request' : 'Server Error';\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n","import mongoose from \"mongoose\";\n\nconst userModel = new mongoose.Schema({\n  name: {\n    type: String,\n    required: [true, 'User name is missing'],\n  },\n  password: {\n    type: String,\n    required: [true, 'Password is missing'],\n    minLength: [6, 'Password length should be at least 6 characters'],\n    select: false,\n  },\n});\n\nexport const User = mongoose.model(\"User\", userModel);\n","import express from 'express';\nimport { getStocks } from '../controllers/stocksController';\n\nconst router = express.Router();\n\nrouter\n  .route('/')\n  .get(getStocks);\n\nexport default router;","import { Stocks } from \"../models/stocksModel\";\nimport catchAsync from \"../utils/catchAsync\";\n\n\nexport const getStocks = catchAsync(async (req, res) => {\n  const stocks = await Stocks.find({ key: { $in: req.query.keys } });\n  const filteredStocks = stocks.map(item => ({\n    key: item.key,\n    name: item.name,\n    data: item.data.filter(x => !!x.close),\n  }));\n\n  res.status(200).json({\n    status: 'success',\n    results: filteredStocks.length,\n    data: filteredStocks,\n  });\n});","import mongoose from \"mongoose\";\n\nconst stocksModel = new mongoose.Schema({\n  key: {\n    type: String,\n    required: true,\n  },\n  name: {\n    type: String,\n    required: true,\n  },\n  data: [{\n    date: Date,\n    open: Number,\n    high: Number,\n    low: Number,\n    close: Number,\n    volume: Number,\n    adjclose: Number,\n  }],\n});\n\nstocksModel.pre('save', function (next) {\n  for (const item of this.data) {\n    if (item.date) {\n      item.date = new Date(item.date as unknown as number * 1000);\n    }\n  }\n\n  next();\n});\n\nexport const Stocks = mongoose.model(\"Stocks\", stocksModel);\n","/* eslint-disable no-console */\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\nimport { Stocks } from \"../models/stocksModel\";\n\nconst options = {\n  method: 'GET',\n  url: 'https://yh-finance.p.rapidapi.com/stock/v3/get-historical-data',\n  headers: {\n    'X-RapidAPI-Key': 'f8132e822fmshc64ed9a17db06cep168a86jsn69eecf3051ef',\n    'X-RapidAPI-Host': 'yh-finance.p.rapidapi.com',\n  },\n};\n\nconst updateDatabase = async (symbol: string, name: string) => {\n  const stocks = await Stocks.findOne({ key: symbol });\n\n  const lastUpdateDate = dayjs(stocks && stocks.data[0].date);\n  const now = dayjs();\n  const daysDifference = now.diff(lastUpdateDate, 'days');\n\n  // database is updated from Wednesday to Saturday\n  if (daysDifference > 1 && now.day() > 2) {\n    console.log(`Requesting data for ${name} from RapidAPI`);\n\n    const response = await axios.request({ ...options, params: { symbol } });\n\n    await Stocks.deleteOne({ key: symbol });\n    await Stocks.create({ key: symbol, name, data: response.data.prices });\n  }\n};\n\nexport default () => {\n  updateDatabase('TSLA', 'Tesla');\n  updateDatabase('AAPL', 'Apple');\n  updateDatabase('MSFT', 'Miscrosoft');\n  updateDatabase('GOOG', 'Google');\n};"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"/"}